-- ---------------------------------------------------------------------------
--
--    Project:	      Alex
--
--    Filename:       adc_getdata_axi_v1_0.vhd
--
--    Description:    An adc_getdata block with an AXI Lite interface.
--                    Based on AXI Lite template generated by Vivado.  
--
--    © Copyright 2019 KTH. All rights reserved.
--
-- ---------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.IED_config.all;

entity adc_getdata_axi_v1_0 is
	generic (
		-- Users to add parameters here

		-- User parameters ends
		-- Do not modify the parameters beyond this line


		-- Parameters of Axi Slave Bus Interface S00_AXI
		C_S00_AXI_DATA_WIDTH	: integer	:= 32;
		C_S00_AXI_ADDR_WIDTH	: integer	:= 4
	);
	port (
		-- Users to add ports here
    eoc    : out std_logic;     -- "End of conversion"      
    enable_slider: in std_logic;                                     
    dch_00 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_01 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_02 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_03 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_04 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_05 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_06 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_07 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_08 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_09 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_10 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_11 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_12 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_13 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_14 : out  std_logic_vector(data_bitlength-1 downto 0);    
    dch_15 : out  std_logic_vector(data_bitlength-1 downto 0);   
    --ADC1
    sdo  : in std_logic; -- ADC SDO    
    busy : in std_logic;        
    cnv  : out std_logic; -- conversion start         
    sck  : inout std_logic; -- clock for ADC to send data back    
    reset: out std_logic;
    csn  : out std_logic;
    pd   : out std_logic;
    din  : out std_logic;      
    --ADC2
    sdo_1  : in std_logic; -- ADC SDO    
    busy_1 : in std_logic;        
    cnv_1  : out std_logic; -- conversion start         
    sck_1  : inout std_logic; -- clock for ADC to send data back    
    reset_1: out std_logic;
    csn_1  : out std_logic;
    pd_1   : out std_logic;
    din_1  : out std_logic;  
     
		-- User ports ends
    
		-- Do not modify the ports beyond this line

		-- Ports of Axi Slave Bus Interface S00_AXI
		s00_axi_aclk	  : in std_logic;
		s00_axi_aresetn	: in std_logic;
		s00_axi_awaddr	: in std_logic_vector(C_S00_AXI_ADDR_WIDTH-1 downto 0);
		s00_axi_awprot	: in std_logic_vector(2 downto 0);
		s00_axi_awvalid	: in std_logic;
		s00_axi_awready	: out std_logic;
		s00_axi_wdata	  : in std_logic_vector(C_S00_AXI_DATA_WIDTH-1 downto 0);
		s00_axi_wstrb	  : in std_logic_vector((C_S00_AXI_DATA_WIDTH/8)-1 downto 0);
		s00_axi_wvalid	: in std_logic;
		s00_axi_wready	: out std_logic;
		s00_axi_bresp	  : out std_logic_vector(1 downto 0);
		s00_axi_bvalid	: out std_logic;
		s00_axi_bready	: in std_logic;
		s00_axi_araddr	: in std_logic_vector(C_S00_AXI_ADDR_WIDTH-1 downto 0);
		s00_axi_arprot	: in std_logic_vector(2 downto 0);
		s00_axi_arvalid	: in std_logic;
		s00_axi_arready	: out std_logic;
		s00_axi_rdata	  : out std_logic_vector(C_S00_AXI_DATA_WIDTH-1 downto 0);
		s00_axi_rresp	  : out std_logic_vector(1 downto 0);
		s00_axi_rvalid	: out std_logic;
		s00_axi_rready	: in std_logic
	);
end adc_getdata_axi_v1_0;

architecture arch_imp of adc_getdata_axi_v1_0 is

  signal dch_array_i    : adc_dch_array;
  
	-- component declaration
	component adc_getdata_axi_v1_0_S00_AXI is
		generic (
		C_S_AXI_DATA_WIDTH	: integer	:= 32;
		C_S_AXI_ADDR_WIDTH	: integer	:= 4
		);
		port (
    EOC           : out std_logic;                                         
    DCH_ARRAY     : out adc_dch_array;  
    ENABLE_SLIDER : in std_logic;
    --ADC1
    SDO           : in std_logic; -- ADC SDO    
    BUSY          : in std_logic;        
    CNV           : out std_logic; -- conversion start         
    SCK           : inout std_logic; -- clock for ADC to send data back    
    RESET         : out std_logic;
    CSN           : out std_logic;
    PD            : out std_logic;
    DIN           : out std_logic; 
    --ADC2
    SDO_1         : in std_logic; -- ADC SDO    
    BUSY_1        : in std_logic;        
    CNV_1         : out std_logic; -- conversion start         
    SCK_1         : inout std_logic; -- clock for ADC to send data back    
    RESET_1       : out std_logic;
    CSN_1         : out std_logic;
    PD_1          : out std_logic;
    DIN_1         : out std_logic;
		S_AXI_ACLK	  : in std_logic;
		S_AXI_ARESETN	: in std_logic;
		S_AXI_AWADDR	: in std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
		S_AXI_AWPROT	: in std_logic_vector(2 downto 0);
		S_AXI_AWVALID	: in std_logic;
		S_AXI_AWREADY	: out std_logic;
		S_AXI_WDATA	  : in std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
		S_AXI_WSTRB	  : in std_logic_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);
		S_AXI_WVALID	: in std_logic;
		S_AXI_WREADY	: out std_logic;
		S_AXI_BRESP	  : out std_logic_vector(1 downto 0);
		S_AXI_BVALID	: out std_logic;
		S_AXI_BREADY	: in std_logic;
		S_AXI_ARADDR	: in std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
		S_AXI_ARPROT	: in std_logic_vector(2 downto 0);
		S_AXI_ARVALID	: in std_logic;
		S_AXI_ARREADY	: out std_logic;
		S_AXI_RDATA	  : out std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
		S_AXI_RRESP	  : out std_logic_vector(1 downto 0);
		S_AXI_RVALID	: out std_logic;
		S_AXI_RREADY	: in std_logic
		);
	end component adc_getdata_axi_v1_0_S00_AXI;

begin

-- Instantiation of Axi Bus Interface S00_AXI
adc_getdata_axi_v1_0_S00_AXI_inst : adc_getdata_axi_v1_0_S00_AXI
	generic map (
		C_S_AXI_DATA_WIDTH	=> C_S00_AXI_DATA_WIDTH,
		C_S_AXI_ADDR_WIDTH	=> C_S00_AXI_ADDR_WIDTH
	)
	port map (
    EOC	          => eoc,
		DCH_ARRAY	    => dch_array_i,
		ENABLE_SLIDER => enable_slider,
		--ADC1
		SDO => sdo,     
    BUSY => busy,        
    CNV => cnv,          
    SCK => sck,     
    RESET => reset,
    CSN => csn,  
    PD => pd,   
    DIN => din,      
    --ADC2
    SDO_1 => sdo_1,     
    BUSY_1 => busy_1,        
    CNV_1 => cnv_1,          
    SCK_1 => sck_1,     
    RESET_1 => reset_1,
    CSN_1 => csn_1,  
    PD_1 => pd_1,   
    DIN_1 => din_1,
		S_AXI_ACLK	  => s00_axi_aclk,
		S_AXI_ARESETN	=> s00_axi_aresetn,
		S_AXI_AWADDR	=> s00_axi_awaddr,
		S_AXI_AWPROT	=> s00_axi_awprot,
		S_AXI_AWVALID	=> s00_axi_awvalid,
		S_AXI_AWREADY	=> s00_axi_awready,
		S_AXI_WDATA	  => s00_axi_wdata,
		S_AXI_WSTRB	  => s00_axi_wstrb,
		S_AXI_WVALID	=> s00_axi_wvalid,
		S_AXI_WREADY	=> s00_axi_wready,
		S_AXI_BRESP	  => s00_axi_bresp,
		S_AXI_BVALID	=> s00_axi_bvalid,
		S_AXI_BREADY	=> s00_axi_bready,
		S_AXI_ARADDR	=> s00_axi_araddr,
		S_AXI_ARPROT	=> s00_axi_arprot,
		S_AXI_ARVALID	=> s00_axi_arvalid,
		S_AXI_ARREADY	=> s00_axi_arready,
		S_AXI_RDATA	  => s00_axi_rdata,
		S_AXI_RRESP	  => s00_axi_rresp,
		S_AXI_RVALID	=> s00_axi_rvalid,
		S_AXI_RREADY	=> s00_axi_rready
	);

	-- Add user logic here
  dch_00 <= dch_array_i(ADC_CH_00_IDX);       
  dch_01 <= dch_array_i(ADC_CH_01_IDX);       
  dch_02 <= dch_array_i(ADC_CH_02_IDX);       
  dch_03 <= dch_array_i(ADC_CH_03_IDX);       
  dch_04 <= dch_array_i(ADC_CH_04_IDX);       
  dch_05 <= dch_array_i(ADC_CH_05_IDX);       
  dch_06 <= dch_array_i(ADC_CH_06_IDX);       
  dch_07 <= dch_array_i(ADC_CH_07_IDX);       
  dch_08 <= dch_array_i(ADC_CH_08_IDX);       
  dch_09 <= dch_array_i(ADC_CH_09_IDX);       
  dch_10 <= dch_array_i(ADC_CH_10_IDX);       
  dch_11 <= dch_array_i(ADC_CH_11_IDX);       
  dch_12 <= dch_array_i(ADC_CH_12_IDX);       
  dch_13 <= dch_array_i(ADC_CH_13_IDX);       
  dch_14 <= dch_array_i(ADC_CH_14_IDX);       
  dch_15 <= dch_array_i(ADC_CH_15_IDX);       
  
	-- User logic ends

end arch_imp;
